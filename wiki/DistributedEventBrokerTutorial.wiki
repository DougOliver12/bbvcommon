#summary Shows the basic usage of the Distributed Event Broker

== Setup of the distributed event broker ==
The usage of the distributed event broker is astonishingly simple when you have prepared your transport layer. Basically it is only two lines of code.
{{{
// Use existing event broker or create special one for distributed events
var eventBroker = new EventBroker();

// Use extension method AddDistributedExtension
var extension = // new TechnologySpecificDistributedEventBrokerExtension
eventBroker.AddDistributedExtension(extension);
}}}

== Transport layers ==
The sections below are not meant to serve as an introduction into the specific transport layer. For transport layer specific setup, read the documentation pages provided by the project owners.
=== NServiceBus ===
{{{
IBus bus = // Get IBus instance
var extension = new NServiceBusDistributedEventBrokerExtension("DistributedEventBroker", bus);
eventBroker.AddDistributedExtension(extension);
}}}

Make sure that bbv.Common.!DistributedEventBroker.NServiceBusAdapter.dll is scanned by NServiceBus when auto loading of message handlers is enabled.
=== MassTransit ===
{{{
IServiceBus serviceBus = // Get IServiceBus instance
var extension = new MassTransitDistributedEventBrokerExtension
("DistributedEventBroker", serviceBus);
eventBroker.AddDistributedExtension(extension);
}}}

Make sure the `MassTransitEventFiredHandler` is registered with transient life time in the underlying container. When supported use assembly scanning functionality of container and include bbv.Common.!DistributedEventBroker.MassTransitAdapter.dll in the search.
=== RhinoESB ===
{{{
IServiceBus serviceBus = // Get IServiceBus instance
var extension = new RhinoEsbDistributedEventBrokerExtension("DistributedEventBroker", serviceBus);
eventBroker.AddDistributedExtension(extension);
}}}

Make sure the `RhinoEsbEventFiredHandler` is registered in the windsor container.
== Scoping & Identification ==

== Customization ==
=== Serializer ===
If you want to use another or a custom serializer you have to inherit from `DefaultDistributedFactory` and override `CreateEventArgsSerializer`.
=== Custom message ===
If you want to extend the standard message with additional information or if your transport layer has restrictions on the message contracts you have to inherit from `DefaultDistributedFactory` and override `CreateMessageFactory`.

Your message factory can extend `AbstractEventMessageFactory` for simple scenarios.
=== Selection Strategy ===
Selection strategies are queried when a new topic is created on the event broker where the extension is added. The default selection strategy accepts all topics. This means that all events fired on the event broker which has the extension will be published on the transport layer.

If you want to use your own convention you have to inherit from `DefaultDistributedFactory` and override `CreateTopicSelectionStrategy`. For simple scenarios the `FuncTopicSelectionStrategy` can be used which accepts a lambda which acts as strategy implementation.

== Restrictions ==