#summary Overview

bbv.Common consists of several mostly independent components:

== Event Notification ==

===EventBroker===
Notification component providing:
 * Synchronous and asynchronous notification
 * Automatic thread switching: to background or UI thread
 * Loose coupling of event topic publishers and subscribers
 * Publishers and subscribers are referenced by weak references. Therefore they can be garbage collected
 * Multiple publishers and/or subscribers for a single event topic
 * Matchers for publications and subscriptions
 * Thorough customizable logging
 * Extension support

===!EventArgs===
generic event arguments

===!EventFilter===
event filter to aggregate and delay frequently occurring events (e.g. file changes)

== State Machine ==

; [[State Machine|bbv.Common.StateMachine]] : hierarchical state machine
:*  value type based (enums, ints, ...) resulting in single class state machines.
:* actions
:**on transitions
:**on entry and exit actions 
:* transaction guards
:* hierarchical
:** different history behaviours to initialize state always to same state or last active state 
:* fluent definition interface
:* synchronous/asynchronous state machine
:** passive state machine handles state transitions synchronuously
:** active state machine handles state transitions asynchronously on the worker thread of the state machine 
:* configurable thorough logging simplifies debugging using log4net
:* state machine report for textual description of state machine

== Asynchronous Operations ==

; bbv.Common.Async.AsyncResult : implementation for IAsyncResult to execute asynchonous operations

; bbv.Common.Async.AsyncWorker : extends BackgroundWorker with exception handling that does not swallow exception and simpler usage within code.

; bbv.Common.AsyncModules : The AsyncModule components provide an easy way to a multithreaded application. Arbitrary objects (so called modules) can be extended with one or more worker threads and message queues to perform asynchronous tasks:
:* Any object can be extended to build an asynchronous task executor
:* Message queue (note: not MS message queue) based communication that supports queuing messages last or first in queue
;* thorough logging
:* Extension support

; bbv.Common.Threading.UserInterfaceThreadSynchronizer : simple to use thread switcher to execute operations synchronously or asynchronously on user interface thread (WinForms, WPF and ASP.NET)

== Rule Evaluation ==

; bbv.Common.RuleEngine : foundation for evaluating rules:
:* Single entry point for checking rules
:::	The rule engine provides a single entry point (method RuleEngine.Validate) to all invokers (an invoker is a client starting the validation process).
:*	Loosely coupled
:::	Invoker of rule checking does not need to know the rules. It only has to use a descriptor (IRuleSetDescriptor) describing the set of rules that has to be checked.
:*	Context based rule sets
:::	A context is defined by a rule set descriptor (IRuleSetDescriptor).
:::	Rules providers (IRulesProvider â€“ are responsible of returning rules matching a rule set descriptor) can be defined per context.
:::	A central RulesProviderFinder (known by the rule engine) is responsible of accessing the rules providers matching the current context.

== Test Utilities ==

; bbv.Common.TestUtilities.EventTester / EventTestList : simplifies testing of event invocations (automatic registration and deregistration, invocation count test, ...)

; bbv.Common.TestUtilities.Log4NetHelper : test log messages

; bbv.Common.TestUtilities.TemporaryFileHolder : manages temporarily needed files (automatic deletion)

== Data Handling ==

; bbv.Common.Data.CsvParser / Writer : Parser and Writer for .csv (comma separated values) files.

== File System ==

; bbv.Common.IO.FileActionCommand : Execute commands recursively on the file system:
:* Get all files
:* Move files
:* Number of folders and files
:* Extensible with custom commands

; bbv.Common.IO.FileSystemHelper / DriveUtilities : Provides information about the file system and drives

== Miscellaneous ==

; bbv.Common.Diagnostics.ApplicationHelper : Provides functionality to check whether application is already running and optionally switch to running instance

; bbv.Common.Diagnostics.HighResolutionStopWatch : StopWatch that uses processor ticks for high resolution timing

; bbv.Common.Formatters.FormatHelper : String.Format replacement that does not crash if too few arguments are defined but returns an error string.

; bbv.Common.Formatters.StringTruncationFormatter : Format provider for formatting string with a maximal length.

; bbv.Common.IO.StreamHelper : Provides functionality for manipulating streams (copy and compare)

; bbv.Common.IO.StreamLoggerStream / StreamDecoratorStream : stream decorators for logging or generic use

; bbv.Common.IO.TextFileReader / TextFileWriter : wrapper for files access to enable unit testing

; bbv.Common.Resources : resource loaders to load data from file system or embedded resources

; bbv.Common.Security : Provides MD5 and SHA1 hashing

; bbv.Common.Windows.WindowsHelper : Provides shutdown and logoff functionality.

== ASP.NET ==

; bbv.Common.Web.Caching : Provides centralized access to the ASP.Net Cache. 
: The default caching behaviour is to cache the data for the duration of the page request. It is possible to set the duration of caching in the configuration file. The key in the configuration file has to match the main key under which the object is stored in the cache.
: To distinguish between different cached objects of the same main key, a subkey can be defined. That means the main key is used to define the duration of the caching and the combination of the main and subkey is used to identify the object in the cache.

; bbv.Common.Web.Exceptions : Provides components for simple exception handling and visualization

; bbv.Common.Web.UI : Helper components for ASP.NET user interface interaction
;* GridViewSortExtender 
:: Adds an image to the sort column indicating sort direction.
;* ControlHelper, DropDownListHelper, GridViewHelper, TextControlHelper 
:: Functionality to manipulate controls.
'''Bold text'''