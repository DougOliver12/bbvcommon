#summary A sample state machine.
#labels StateMachine,Sample

This is a sample state machine

_add image here_

== Definition ==

{{{
var elevator = new PassiveStateMachine<States, Events>("Elevator");

elevator.DefineHierarchyOn(States.Healthy, States.OnFloor, HistoryType.Deep, States.OnFloor, States.Moving);
elevator.DefineHierarchyOn(States.Moving, States.MovingUp, HistoryType.Shallow, States.MovingUp, States.MovingDown);
elevator.DefineHierarchyOn(States.OnFloor, States.DoorClosed, HistoryType.None, States.DoorClosed, States.DoorOpen);

elevator.In(States.Healthy)
    .On(Events.ErrorOccured).Goto(States.Error);

elevator.In(States.Error)
    .On(Events.Reset).Goto(States.Healthy);

elevator.In(States.OnFloor)
    .ExecuteOnEntry(this.AnnounceFloor)
    .On(Events.CloseDoor).Goto(States.DoorClosed)
    .On(Events.OpenDoor).Goto(States.DoorOpen)
    .On(Events.GoUp).Goto(States.MovingUp).OnlyIf(this.CheckOverload)
    .On(Events.GoUp).Execute(this.AnnounceOverload)
    .On(Events.GoDown).Goto(States.MovingDown).OnlyIf(this.CheckOverload)
    .On(Events.GoUp).Execute(this.AnnounceOverload);

elevator.In(States.Moving)
    .On(Events.Stop).Goto(States.OnFloor);
}}}

The above state machine uses these actions and guards:
{{{
private void AnnounceFloor()
{
    /* announce floor number */
}

private void AnnounceOverload(object[] arguments)
{
    /* announce overload */
}

private bool CheckOverload(object[] arguments)
{
    return whetherElevatorHasOverload;
}
}}}

== Run the State Machine ==

This is a small sample to show how to interact with the state machine:
{{{
elevator.Initialize(States.OnFloor);
            
// queue some events to be performed when state machine is started.
elevator.Fire(Events.ErrorOccured);
elevator.Fire(Events.Reset);
            
elevator.Start();

// these events are performed immediately
elevator.Fire(Events.OpenDoor);
elevator.Fire(Events.CloseDoor);
elevator.Fire(Events.GoUp);
elevator.Fire(Events.Stop);
elevator.Fire(Events.OpenDoor);

elevator.Stop();
}}}

== Log ==

If the above code is run then these are the log messages (if all are enabled - see log4net documentation on how to configure log messages).

Note how the state exits and enters are logged, especially for hierarchical transitions.

{{{
INFO    State machine Elevator initializes to state OnFloor.
INFO    State machine Elevator switched to state DoorClosed.
DEBUG    State machine Elevator performed  -> Enter Healthy -> Enter OnFloor -> Enter DoorClosed.
INFO    Fire event ErrorOccured on state machine Elevator with current state DoorClosed and event arguments .
INFO    State machine Elevator switched to state Error.
DEBUG    State machine Elevator performed  -> Exit DoorClosed -> Exit OnFloor -> Exit Healthy -> Enter Error.
INFO    Fire event Reset on state machine Elevator with current state Error and event arguments .
INFO    State machine Elevator switched to state DoorClosed.
DEBUG    State machine Elevator performed  -> Exit Error -> Enter Healthy -> Enter OnFloor -> Enter DoorClosed.
INFO    Fire event OpenDoor on state machine Elevator with current state DoorClosed and event arguments .
INFO    State machine Elevator switched to state DoorOpen.
DEBUG    State machine Elevator performed  -> Exit DoorClosed -> Enter DoorOpen.
INFO    Fire event CloseDoor on state machine Elevator with current state DoorOpen and event arguments .
INFO    State machine Elevator switched to state DoorClosed.
DEBUG    State machine Elevator performed  -> Exit DoorOpen -> Enter DoorClosed.
INFO    Fire event GoUp on state machine Elevator with current state DoorClosed and event arguments .
INFO    State machine Elevator switched to state MovingUp.
DEBUG    State machine Elevator performed  -> Exit DoorClosed -> Exit OnFloor -> Enter Moving -> Enter MovingUp.
INFO    Fire event Stop on state machine Elevator with current state MovingUp and event arguments .
INFO    State machine Elevator switched to state DoorClosed.
DEBUG    State machine Elevator performed  -> Exit MovingUp -> Exit Moving -> Enter OnFloor -> Enter DoorClosed.
INFO    Fire event OpenDoor on state machine Elevator with current state DoorClosed and event arguments .
INFO    State machine Elevator switched to state DoorOpen.
DEBUG    State machine Elevator performed  -> Exit DoorClosed -> Enter DoorOpen.
}}}

== Report ==

The state machine report looks like this:
{{{
Elevator: initial state = none
    Healthy: initial state = OnFloor history type = Deep
        entry action: False
        exit action: False
        ErrorOccured -> Error actions: 0 guard:False
        OnFloor: initial state = DoorClosed history type = None
            entry action: True
            exit action: False
            CloseDoor -> DoorClosed actions: 0 guard:False
            OpenDoor -> DoorOpen actions: 0 guard:False
            GoUp -> MovingUp actions: 0 guard:True
            GoUp -> internal actions: 1 guard:False
            GoUp -> internal actions: 1 guard:False
            GoDown -> MovingDown actions: 0 guard:True
            DoorClosed: initial state = None history type = None
                entry action: False
                exit action: False
            DoorOpen: initial state = None history type = None
                entry action: False
                exit action: False
        Moving: initial state = MovingUp history type = Shallow
            entry action: False
            exit action: False
            Stop -> OnFloor actions: 0 guard:False
            MovingUp: initial state = None history type = None
                entry action: False
                exit action: False
            MovingDown: initial state = None history type = None
                entry action: False
                exit action: False
    Error: initial state = None history type = None
        entry action: False
        exit action: False
        Reset -> Healthy actions: 0 guard:False
}}}